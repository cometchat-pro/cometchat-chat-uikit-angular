import { Component, ViewChild, Input, ChangeDetectionStrategy } from "@angular/core";
import { CometChat } from "@cometchat/chat-sdk-javascript";
import '@cometchat/uikit-elements';
import { localize, CometChatTheme, fontHelper, CometChatUserEvents } from "@cometchat/uikit-resources";
import { WithMessagesStyle, MessagesConfiguration, UsersConfiguration } from "@cometchat/uikit-shared";
import * as i0 from "@angular/core";
import * as i1 from "../../CometChatTheme.service";
import * as i2 from "../../CometChatUsers/cometchat-users/cometchat-users.component";
import * as i3 from "../../CometChatMessages/cometchat-messages/cometchat-messages.component";
import * as i4 from "@angular/common";
/**
*
* CometChatUsersWithMessagesComponent is a wrapper component for CometChatMessagesComponent and CometChatConversations component to show chats and messages in one screen
*
* @version 1.0.0
* @author CometChatTeam
* @copyright © 2022 CometChat Inc.
*
*/
export class CometChatUsersWithMessagesComponent {
    constructor(elementRef, ref, themeService) {
        this.elementRef = elementRef;
        this.ref = ref;
        this.themeService = themeService;
        this.isMobileView = false;
        this.messageText = localize("NO_USERS_SELECTED");
        this.usersWithMessagesStyle = {
            width: "100%",
            height: "100%",
            borderRadius: "none",
        };
        this.messagesConfiguration = new MessagesConfiguration({});
        this.usersConfiguration = new UsersConfiguration({});
        this.onError = (error) => {
            console.log(error);
        };
        this.theme = new CometChatTheme({});
        this.labelStyle = {
            background: "transparent",
            textFont: "700 22px Inter",
            textColor: "rgba(20, 20, 20, 0.33)"
        };
        this.sideBarStyle = {};
        this.onBack = () => {
            this.user = null;
        };
        this.onItemClick = (user) => {
            this.user = user;
            this.ref.detectChanges();
        };
        this.emptyMessageStyle = () => {
            return {
                background: this.usersWithMessagesStyle.background || this.themeService.theme.palette.getBackground(),
                height: this.usersWithMessagesStyle.height,
                width: `calc(${this.usersWithMessagesStyle.width} - 280px)`,
                border: "none",
                borderRadius: this.usersWithMessagesStyle.borderRadius,
            };
        };
        this.usersWrapperStyles = () => {
            return {
                height: this.usersWithMessagesStyle.height,
                width: this.usersWithMessagesStyle.width,
                border: this.usersWithMessagesStyle.border,
                borderRadius: this.usersWithMessagesStyle.borderRadius,
                background: this.usersWithMessagesStyle.background || this.themeService.theme.palette.getBackground(),
                position: 'relative'
            };
        };
    }
    ngAfterViewInit() {
        this.updateBackdropHeight();
    }
    updateBackdropHeight() {
        let divHeight = this.elementRef.nativeElement.offsetHeight;
        let divWidth = this.elementRef.nativeElement.offsetWidth;
        if (divHeight === 0 || divWidth === 0) {
            const rect = this.elementRef.nativeElement.getBoundingClientRect();
            divHeight = rect.height;
            divWidth = rect.width;
        }
        let backdropStyle = {
            height: divHeight + "px",
            width: divWidth + "px",
            background: "rgba(0, 0, 0, 0.5)",
            position: "fixed"
        };
        this.messagesConfiguration.messageListConfiguration.backdropStyle = backdropStyle;
        this.messagesConfiguration.detailsConfiguration.backdropStyle = backdropStyle;
        this.messagesConfiguration.messageComposerConfiguration.backdropStyle = backdropStyle;
        this.messagesConfiguration.detailsConfiguration.groupMembersConfiguration.backdropStyle = backdropStyle;
        this.ref.detectChanges();
    }
    ngOnChanges(changes) {
        if (changes["isMobileView"]) {
            if (this.isMobileView) {
                this.messagesConfiguration.messageListConfiguration.messageInformationConfiguration.messageInformationStyle.height = "100%";
                this.messagesConfiguration.messageListConfiguration.messageInformationConfiguration.messageInformationStyle.width = "100%";
                this.messagesConfiguration.detailsConfiguration.detailsStyle.padding = "0 8px";
                this.messagesConfiguration.messageHeaderConfiguration.hideBackButton = false;
                this.messagesConfiguration.messageHeaderConfiguration = { ...this.messagesConfiguration.messageHeaderConfiguration };
                this.messagesConfiguration = { ...this.messagesConfiguration };
            }
            else if (!this.isMobileView) {
                this.messagesConfiguration.messageListConfiguration.messageInformationConfiguration.messageInformationStyle.height = "500px";
                this.messagesConfiguration.messageListConfiguration.messageInformationConfiguration.messageInformationStyle.width = "500px";
                this.messagesConfiguration.detailsConfiguration.detailsStyle.padding = "0 100px";
                this.messagesConfiguration.messageHeaderConfiguration.hideBackButton = true;
                this.messagesConfiguration.messageHeaderConfiguration = { ...this.messagesConfiguration.messageHeaderConfiguration };
                this.messagesConfiguration = { ...this.messagesConfiguration };
            }
            setTimeout(() => {
                this.updateBackdropHeight();
            }, 100);
        }
    }
    ngOnInit() {
        this.setWithMessagesStyle();
        if (!this.messagesConfiguration.messageHeaderConfiguration.onBack) {
            this.messagesConfiguration.messageHeaderConfiguration.onBack = this.onBack;
        }
        this.subscribeToEvents();
        CometChat.getLoggedinUser()
            .then((user) => {
            this.loggedInUser = user;
        })
            .catch((error) => {
            if (this.onError) {
                this.onError(error);
            }
        });
    }
    setWithMessagesStyle() {
        let defaultStyle = new WithMessagesStyle({
            width: "100%",
            height: "100%",
            background: this.themeService.theme.palette.getBackground(),
            borderRadius: "none",
            border: `1px solid ${this.themeService.theme.palette.getAccent200()}`,
            messageTextColor: this.themeService.theme.palette.getAccent600(),
            messageTextFont: fontHelper(this.themeService.theme.typography.title1),
        });
        this.usersWithMessagesStyle = {
            ...defaultStyle,
            ...this.usersWithMessagesStyle
        };
        this.labelStyle.textFont = this.usersWithMessagesStyle.messageTextFont;
        this.labelStyle.textColor = this.usersWithMessagesStyle.messageTextColor;
        this.messagesConfiguration.messagesStyle.border = this.messagesConfiguration.messagesStyle.border ?? "none";
        this.usersConfiguration.usersStyle.border = this.usersConfiguration.usersStyle.border ?? "none";
        if (!this.usersConfiguration?.usersStyle?.border || this.usersConfiguration?.usersStyle?.border == "none") {
            this.sideBarStyle = { borderRight: this.usersWithMessagesStyle.border };
        }
    }
    ngOnDestroy() {
        this.unsubscribeToEvents();
    }
    // subscribe to global events
    subscribeToEvents() {
        this.ccUserBlocked = CometChatUserEvents.ccUserBlocked.subscribe((user) => {
            if (this.user && user.getUid() == this.user.getUid()) {
                this.user = user;
                this.ref.detectChanges();
            }
        });
        this.ccUserUnBlocked = CometChatUserEvents.ccUserUnblocked.subscribe((user) => {
            if (this.user && user.getUid() == this.user.getUid()) {
                this.user = user;
                this.ref.detectChanges();
            }
        });
    }
    // unsubscribe to subscribed events.
    unsubscribeToEvents() {
        this.ccUserBlocked?.unsubscribe();
        this.ccUserUnBlocked?.unsubscribe();
    }
}
CometChatUsersWithMessagesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: CometChatUsersWithMessagesComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.CometChatThemeService }], target: i0.ɵɵFactoryTarget.Component });
CometChatUsersWithMessagesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: CometChatUsersWithMessagesComponent, selector: "cometchat-users-with-messages", inputs: { user: "user", isMobileView: "isMobileView", messageText: "messageText", usersWithMessagesStyle: "usersWithMessagesStyle", messagesConfiguration: "messagesConfiguration", usersConfiguration: "usersConfiguration", onError: "onError" }, viewQueries: [{ propertyName: "userRef", first: true, predicate: ["usersRef"], descendants: true }, { propertyName: "messageListRef", first: true, predicate: ["messagesRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"cc-with-messages__wrapper\" [ngStyle]=\"usersWrapperStyles()\">\n  <div class=\"cc-with-messages__sidebar\" [ngClass]=\"{mobile : isMobileView}\" [ngStyle]=\"sideBarStyle\">\n    <cometchat-users\n    #usersRef\n    [activeUser]=\"user\"\n    [hideSearch]=\"usersConfiguration.hideSearch\"\n    [searchIconURL]=\"usersConfiguration.searchIconURL\"\n    [searchRequestBuilder]=\"usersConfiguration.searchRequestBuilder\"\n    [onItemClick]=\"usersConfiguration.onItemClick || onItemClick\"\n    [usersStyle]=\"usersConfiguration.usersStyle\"\n    [subtitleView]=\"usersConfiguration.subtitleView\"\n    [options]=\"usersConfiguration.options\"\n    [usersRequestBuilder]=\"usersConfiguration.usersRequestBuilder\"\n    [emptyStateView]=\"usersConfiguration.emptyStateView\"\n    [onSelect]=\"usersConfiguration.onSelect\"\n    [loadingIconURL]=\"usersConfiguration.loadingIconURL\"\n    [errorStateView]=\"usersConfiguration.errorStateView\"\n    [loadingStateView]=\"usersConfiguration.loadingStateView\"\n    [titleAlignment]=\"usersConfiguration.titleAlignment\"\n    [showSectionHeader]=\"usersConfiguration.showSectionHeader\"\n    [listItemView]=\"usersConfiguration.listItemView\"\n    [menu]=\"usersConfiguration.menu\"\n    [hideSeparator]=\"usersConfiguration.hideSeparator\"\n    [hideError]=\"usersConfiguration.hideError\"\n    [selectionMode]=\"usersConfiguration.selectionMode\"\n    [listItemStyle]=\"usersConfiguration.listItemStyle\"\n    [statusIndicatorStyle]=\"usersConfiguration.statusIndicatorStyle\"\n    ></cometchat-users>\n  </div>\n  <div class=\"cc-with-messages__main\" [ngClass]=\"{mobile : isMobileView}\" *ngIf=\"user\">\n    <!--Message List Screen-->\n    <cometchat-messages\n    #messagesRef\n    [user]=\"user!\"\n    [messageHeaderConfiguration]=\"messagesConfiguration.messageHeaderConfiguration\"\n    [messageListConfiguration]=\"messagesConfiguration.messageListConfiguration\"\n    [messageComposerConfiguration]=\"messagesConfiguration.messageComposerConfiguration\"\n    [messagesStyle]=\"messagesConfiguration.messagesStyle\"\n    [customSoundForIncomingMessages]=\"messagesConfiguration.customSoundForIncomingMessages\"\n    [customSoundForOutgoingMessages]=\"messagesConfiguration.customSoundForOutgoingMessages\"\n    [detailsConfiguration]=\"messagesConfiguration.detailsConfiguration\"\n    [disableSoundForMessages]=\"messagesConfiguration.disableSoundForMessages\"\n    [disableTyping]=\"messagesConfiguration.disableTyping\"\n    [hideMessageComposer]=\"messagesConfiguration.hideMessageComposer\"\n    [hideMessageHeader]=\"messagesConfiguration.hideMessageHeader\"\n    [messageComposerView]=\"messagesConfiguration.messageComposerView\"\n    [messageHeaderView]=\"messagesConfiguration.messageHeaderView\"\n    [messageListView]=\"messagesConfiguration.messageListView\"\n    [hideDetails]=\"messagesConfiguration.hideDetails!\"\n    [threadedMessageConfiguration]=\"messagesConfiguration.threadedMessageConfiguration\"\n    >\n    </cometchat-messages>\n    <!--Message List Screen ENDS-->\n  </div>\n  <div class=\"cc-decorator__message--empty\" *ngIf=\"!user\" [ngStyle]=\"emptyMessageStyle()\">\n    <cometchat-label [text]=\"messageText\" [labelStyle]=\"labelStyle\"></cometchat-label>\n   </div>\n</div>", styles: [".cc-with-messages__wrapper{display:flex;height:100%;width:100%;box-sizing:border-box}.cc-with-messages__sidebar{width:280px;height:100%;position:relative}.cc-with-messages__main{width:calc(100% - 280px);height:100%}.mobile{width:100%!important;height:100%;position:absolute}.cc-decorator__message--empty{display:flex;justify-content:center;align-items:center}\n"], components: [{ type: i2.CometChatUsersComponent, selector: "cometchat-users", inputs: ["usersRequestBuilder", "searchRequestBuilder", "subtitleView", "disableUsersPresence", "listItemView", "menu", "options", "activeUser", "hideSeparator", "searchPlaceholder", "hideError", "selectionMode", "searchIconURL", "hideSearch", "title", "onError", "emptyStateView", "onSelect", "errorStateView", "loadingIconURL", "showSectionHeader", "sectionHeaderField", "loadingStateView", "emptyStateText", "errorStateText", "titleAlignment", "usersStyle", "listItemStyle", "statusIndicatorStyle", "avatarStyle", "onItemClick", "searchKeyword", "onEmpty", "userPresencePlacement", "disableLoadingState"] }, { type: i3.CometChatMessagesComponent, selector: "cometchat-messages", inputs: ["user", "group", "currentAskAIBot", "hideMessageComposer", "disableTyping", "messageHeaderConfiguration", "messageListConfiguration", "messageComposerConfiguration", "threadedMessageConfiguration", "detailsConfiguration", "customSoundForIncomingMessages", "customSoundForOutgoingMessages", "disableSoundForMessages", "messagesStyle", "messageHeaderView", "messageComposerView", "messageListView", "hideMessageHeader", "hideDetails", "auxiliaryMenu"] }], directives: [{ type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: CometChatUsersWithMessagesComponent, decorators: [{
            type: Component,
            args: [{ selector: "cometchat-users-with-messages", changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"cc-with-messages__wrapper\" [ngStyle]=\"usersWrapperStyles()\">\n  <div class=\"cc-with-messages__sidebar\" [ngClass]=\"{mobile : isMobileView}\" [ngStyle]=\"sideBarStyle\">\n    <cometchat-users\n    #usersRef\n    [activeUser]=\"user\"\n    [hideSearch]=\"usersConfiguration.hideSearch\"\n    [searchIconURL]=\"usersConfiguration.searchIconURL\"\n    [searchRequestBuilder]=\"usersConfiguration.searchRequestBuilder\"\n    [onItemClick]=\"usersConfiguration.onItemClick || onItemClick\"\n    [usersStyle]=\"usersConfiguration.usersStyle\"\n    [subtitleView]=\"usersConfiguration.subtitleView\"\n    [options]=\"usersConfiguration.options\"\n    [usersRequestBuilder]=\"usersConfiguration.usersRequestBuilder\"\n    [emptyStateView]=\"usersConfiguration.emptyStateView\"\n    [onSelect]=\"usersConfiguration.onSelect\"\n    [loadingIconURL]=\"usersConfiguration.loadingIconURL\"\n    [errorStateView]=\"usersConfiguration.errorStateView\"\n    [loadingStateView]=\"usersConfiguration.loadingStateView\"\n    [titleAlignment]=\"usersConfiguration.titleAlignment\"\n    [showSectionHeader]=\"usersConfiguration.showSectionHeader\"\n    [listItemView]=\"usersConfiguration.listItemView\"\n    [menu]=\"usersConfiguration.menu\"\n    [hideSeparator]=\"usersConfiguration.hideSeparator\"\n    [hideError]=\"usersConfiguration.hideError\"\n    [selectionMode]=\"usersConfiguration.selectionMode\"\n    [listItemStyle]=\"usersConfiguration.listItemStyle\"\n    [statusIndicatorStyle]=\"usersConfiguration.statusIndicatorStyle\"\n    ></cometchat-users>\n  </div>\n  <div class=\"cc-with-messages__main\" [ngClass]=\"{mobile : isMobileView}\" *ngIf=\"user\">\n    <!--Message List Screen-->\n    <cometchat-messages\n    #messagesRef\n    [user]=\"user!\"\n    [messageHeaderConfiguration]=\"messagesConfiguration.messageHeaderConfiguration\"\n    [messageListConfiguration]=\"messagesConfiguration.messageListConfiguration\"\n    [messageComposerConfiguration]=\"messagesConfiguration.messageComposerConfiguration\"\n    [messagesStyle]=\"messagesConfiguration.messagesStyle\"\n    [customSoundForIncomingMessages]=\"messagesConfiguration.customSoundForIncomingMessages\"\n    [customSoundForOutgoingMessages]=\"messagesConfiguration.customSoundForOutgoingMessages\"\n    [detailsConfiguration]=\"messagesConfiguration.detailsConfiguration\"\n    [disableSoundForMessages]=\"messagesConfiguration.disableSoundForMessages\"\n    [disableTyping]=\"messagesConfiguration.disableTyping\"\n    [hideMessageComposer]=\"messagesConfiguration.hideMessageComposer\"\n    [hideMessageHeader]=\"messagesConfiguration.hideMessageHeader\"\n    [messageComposerView]=\"messagesConfiguration.messageComposerView\"\n    [messageHeaderView]=\"messagesConfiguration.messageHeaderView\"\n    [messageListView]=\"messagesConfiguration.messageListView\"\n    [hideDetails]=\"messagesConfiguration.hideDetails!\"\n    [threadedMessageConfiguration]=\"messagesConfiguration.threadedMessageConfiguration\"\n    >\n    </cometchat-messages>\n    <!--Message List Screen ENDS-->\n  </div>\n  <div class=\"cc-decorator__message--empty\" *ngIf=\"!user\" [ngStyle]=\"emptyMessageStyle()\">\n    <cometchat-label [text]=\"messageText\" [labelStyle]=\"labelStyle\"></cometchat-label>\n   </div>\n</div>", styles: [".cc-with-messages__wrapper{display:flex;height:100%;width:100%;box-sizing:border-box}.cc-with-messages__sidebar{width:280px;height:100%;position:relative}.cc-with-messages__main{width:calc(100% - 280px);height:100%}.mobile{width:100%!important;height:100%;position:absolute}.cc-decorator__message--empty{display:flex;justify-content:center;align-items:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.CometChatThemeService }]; }, propDecorators: { userRef: [{
                type: ViewChild,
                args: ["usersRef", { static: false }]
            }], messageListRef: [{
                type: ViewChild,
                args: ["messagesRef", { static: false }]
            }], user: [{
                type: Input
            }], isMobileView: [{
                type: Input
            }], messageText: [{
                type: Input
            }], usersWithMessagesStyle: [{
                type: Input
            }], messagesConfiguration: [{
                type: Input
            }], usersConfiguration: [{
                type: Input
            }], onError: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,