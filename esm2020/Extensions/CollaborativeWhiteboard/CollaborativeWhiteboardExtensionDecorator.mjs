import { CometChat } from "@cometchat/chat-sdk-javascript";
import { CometChatTheme, CometChatMessageTemplate, CometChatMessageComposerAction, fontHelper, CometChatUIKitConstants, localize, } from "@cometchat/uikit-resources";
import { CollaborativeWhiteboardConstants, } from "@cometchat/uikit-shared";
import { ChatConfigurator } from "../../Shared/Framework/ChatConfigurator";
import { DataSourceDecorator } from "../../Shared/Framework/DataSourceDecorator";
export class CollaborativeWhiteBoardExtensionDecorator extends DataSourceDecorator {
    constructor(dataSource) {
        super(dataSource);
    }
    getAllMessageTypes() {
        const types = super.getAllMessageTypes();
        if (!types.includes(CollaborativeWhiteboardConstants.extension_whiteboard)) {
            types.push(CollaborativeWhiteboardConstants.extension_whiteboard);
        }
        return types;
    }
    getId() {
        return "collaborativewhiteboard";
    }
    getAllMessageCategories() {
        const categories = super.getAllMessageCategories();
        if (!categories.includes(CometChatUIKitConstants.MessageCategory.custom)) {
            categories.push(CometChatUIKitConstants.MessageCategory.custom);
        }
        return categories;
    }
    checkIfTemplateExist(template, type) {
        return template.some((obj) => obj.type === type);
    }
    getAllMessageTemplates() {
        const templates = super.getAllMessageTemplates();
        if (!this.checkIfTemplateExist(templates, CollaborativeWhiteboardConstants.extension_whiteboard)) {
            templates.push(this.getWhiteBoardTemplate());
        }
        return templates;
    }
    getWhiteBoardTemplate() {
        return new CometChatMessageTemplate({
            type: CollaborativeWhiteboardConstants.extension_whiteboard,
            category: CometChatUIKitConstants.MessageCategory.custom,
            options: (loggedInUser, messageObject, theme, group) => {
                return ChatConfigurator.getDataSource().getCommonOptions(loggedInUser, messageObject, theme, group);
            },
        });
    }
    getAttachmentOptions(theme = new CometChatTheme({}), user, group, id) {
        if (!id?.parentMessageId) {
            let receiverType = user
                ? CometChatUIKitConstants.MessageReceiverType.user
                : CometChatUIKitConstants.MessageReceiverType.group;
            let receiverId = user
                ? user.getUid()
                : group?.getGuid();
            const messageComposerActions = super.getAttachmentOptions(theme, user, group, id);
            let newAction = new CometChatMessageComposerAction({
                id: CollaborativeWhiteboardConstants.whiteboard,
                title: localize("COLLABORATIVE_WHITEBOARD"),
                iconURL: "assets/collaborativewhiteboard.svg",
                iconTint: theme.palette.getAccent700(),
                titleColor: theme.palette.getAccent600(),
                titleFont: fontHelper(theme.typography.subtitle1),
                background: theme.palette.getAccent100(),
                onClick: () => {
                    CometChat.callExtension(CollaborativeWhiteboardConstants.whiteboard, CollaborativeWhiteboardConstants.post, CollaborativeWhiteboardConstants.v1_create, {
                        receiver: receiverId,
                        receiverType: receiverType,
                    })
                        .then((res) => { })
                        .catch((error) => {
                        console.log(error);
                    });
                },
            });
            messageComposerActions.push(newAction);
            return messageComposerActions;
        }
        else {
            return super.getAttachmentOptions(theme, user, group, id);
        }
    }
    getLastConversationMessage(conversation, loggedInUser, additionalConfigurations) {
        const message = conversation.getLastMessage();
        if (message != null &&
            message.getType() ==
                CollaborativeWhiteboardConstants.extension_whiteboard &&
            message.getCategory() == CometChatUIKitConstants.MessageCategory.custom) {
            return localize("CUSTOM_MESSAGE_WHITEBOARD");
        }
        else {
            return super.getLastConversationMessage(conversation, loggedInUser, additionalConfigurations);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,