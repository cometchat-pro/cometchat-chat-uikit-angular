import { DataSourceDecorator } from "../../Shared/Framework/DataSourceDecorator";
import { CometChatMessageEvents, CometChatUIKitConstants, MessageStatus, } from "@cometchat/uikit-resources";
import { CometChatMessageTemplate } from "@cometchat/uikit-resources";
import { CometChat } from "@cometchat/chat-sdk-javascript";
import { localize } from "@cometchat/uikit-resources";
import { StickersConfiguration } from "@cometchat/uikit-shared";
import { StickersConstants } from "@cometchat/uikit-shared";
import { CometChatSoundManager, CometChatUIKitUtility, } from "@cometchat/uikit-shared";
import { ChatConfigurator } from "../../Shared/Framework/ChatConfigurator";
import { CometChatException } from "../../Shared/Utils/ComeChatException";
export class StickersExtensionDecorator extends DataSourceDecorator {
    constructor(dataSource) {
        super(dataSource);
        this.sendStickerMessage = (sticker, loggedInUser, user, group, parentMessageid, onError, customSoundForMessages = "", disableSoundForMessages = false) => {
            let receiverId = user?.getUid() || group?.getGuid();
            let receiverType = user
                ? CometChatUIKitConstants.MessageReceiverType.user
                : CometChatUIKitConstants.MessageReceiverType.group;
            try {
                const customData = {
                    sticker_url: sticker.url,
                    sticker_name: sticker.name,
                };
                const customType = StickersConstants.sticker;
                const customMessage = new CometChat.CustomMessage(receiverId, receiverType, customType, customData);
                if (parentMessageid) {
                    customMessage.setParentMessageId(parentMessageid);
                }
                customMessage.setMetadata({ incrementUnreadCount: true });
                customMessage.setSentAt(CometChatUIKitUtility.getUnixTimestamp());
                customMessage.setMuid(CometChatUIKitUtility.ID());
                CometChatMessageEvents.ccMessageSent.next({
                    message: customMessage,
                    status: MessageStatus.inprogress,
                });
                if (!disableSoundForMessages) {
                    CometChatSoundManager.play(customSoundForMessages ?? CometChatSoundManager.Sound.outgoingMessage);
                }
                CometChat.sendCustomMessage(customMessage)
                    .then((message) => {
                    CometChatMessageEvents.ccMessageSent.next({
                        message: message,
                        status: MessageStatus.success,
                    });
                })
                    .catch((error) => {
                    customMessage.setMetadata({
                        error: true,
                    });
                    CometChatMessageEvents.ccMessageSent.next({
                        message: customMessage,
                        status: MessageStatus.error,
                    });
                });
            }
            catch (error) {
                if (onError) {
                    onError(CometChatException(error));
                }
            }
        };
        this.newDataScorce = dataSource;
        this.configuration = new StickersConfiguration({});
        this.configuration.ccStickerClicked = this.sendStickerMessage;
    }
    getDataScorce() {
        return this.newDataScorce;
    }
    getAllMessageTemplates() {
        let template = super.getAllMessageTemplates();
        if (!this.checkIfTemplateExist(template, StickersConstants.sticker)) {
            template.push(this.getStickerTemplate());
            return template;
        }
        return template;
    }
    getAuxiliaryOptions(id, user, group) {
        return { configuration: this.configuration, id: StickersConstants.sticker };
    }
    getStickerTemplate() {
        return new CometChatMessageTemplate({
            type: StickersConstants.sticker,
            category: CometChatUIKitConstants.MessageCategory.custom,
            options: (loggedInUser, messageObject, theme, group) => {
                return ChatConfigurator.getDataSource().getCommonOptions(loggedInUser, messageObject, theme, group);
            },
        });
    }
    checkIfTemplateExist(template, type) {
        return template.some((obj) => obj.type === type);
    }
    getAllMessageCategories() {
        let categories = super.getAllMessageCategories();
        if (!categories.some((category) => category === CometChatUIKitConstants.MessageCategory.custom)) {
            categories.push(CometChatUIKitConstants.MessageCategory.custom);
        }
        return categories;
    }
    getAllMessageTypes() {
        let types = super.getAllMessageTypes();
        if (!types.some((category) => category === CometChatUIKitConstants.MessageCategory.custom)) {
            types.push(StickersConstants.sticker);
        }
        return types;
    }
    getId() {
        return "stickers";
    }
    getLastConversationMessage(conversation, loggedInUser, additionalConfigurations) {
        const message = conversation.getLastMessage();
        if (message != null &&
            message.getType() == StickersConstants.sticker &&
            message.getCategory() == CometChatUIKitConstants.MessageCategory.custom) {
            return localize("CUSTOM_MESSAGE_STICKER");
        }
        else {
            return super.getLastConversationMessage(conversation, loggedInUser, additionalConfigurations);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,